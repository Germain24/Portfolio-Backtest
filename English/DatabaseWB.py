# -*- coding: utf-8 -*-
"""DatabaseWB.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ua-FV6k-0znUjAKg-AGaf7OnBkY2u6gw
"""

import time
import csv
from urllib.request import urlopen
import certifi
import json
import pandas as pd
from datetime import datetime

def get_jsonparsed_data(url):
    response = urlopen(url, cafile=certifi.where())
    data = response.read().decode("utf-8")
    return json.loads(data)

databaseWB = {}

single = ["Ticker","Sector","Country","Name of company"]
annual = ["Revenue","Cost of revenue","Net income","Total liabilities","Total assets","Cash and cash equivalents"
   ,"Research and development expenses","Retained earnings","Operating expenses","Total stockholders equity","Common stock number"]

for i in single:
    databaseWB[i]=[i]

for i in annual:
   for i2 in range(10):
      databaseWB[i+f" n-{i2}"]=[i+f" n-{i2}"]

Tickers = get_jsonparsed_data("https://financialmodelingprep.com/api/v3/financial-statement-symbol-lists?apikey=ce82b6a14287d6b24fdcaf5468401b12")

def AddElement(Database,LinkNumber,Name,Item,Year=0):
        try:
            Database[Name].append(LinkNumber[Year][Item])
        except:
            Database[Name].append("")
            
        return(Database)

for i in Tickers:
  databaseWB["Ticker"].append(i)

  try:
    link1 = get_jsonparsed_data(f"https://financialmodelingprep.com/api/v3/profile/{i}?apikey=ce82b6a14287d6b24fdcaf5468401b12")
    link2 = get_jsonparsed_data(f"https://financialmodelingprep.com/api/v3/income-statement/{i}?apikey=ce82b6a14287d6b24fdcaf5468401b12")
    link3 = get_jsonparsed_data(f"https://financialmodelingprep.com/api/v3/balance-sheet-statement/{i}?apikey=ce82b6a14287d6b24fdcaf5468401b12&limit=120")
    link4 = get_jsonparsed_data(f"https://financialmodelingprep.com/api/v3/income-statement/{i}?limit=120&apikey=ce82b6a14287d6b24fdcaf5468401b12")
  except:
    link1 = ""
    link2 = ""
    link3 = ""
    link4 = ""

  AddElement(databaseWB,link1,"Sector","sector")
  AddElement(databaseWB,link1,"Country","country")
  AddElement(databaseWB,link1,"Name of company","companyName")
  
  for i2 in range(10):
     AddElement(databaseWB,link2,f'Revenue n-{i2}',"revenue",i2)
     AddElement(databaseWB,link2,f'Cost of revenue n-{i2}',"costOfRevenue",i2)
     AddElement(databaseWB,link2,f'Net income n-{i2}',"netIncome",i2)
     AddElement(databaseWB,link3,f'Total liabilities n-{i2}',"totalLiabilities",i2)
     AddElement(databaseWB,link3,f'Total assets n-{i2}',"totalAssets",i2)
     AddElement(databaseWB,link3,f'Cash and cash equivalents n-{i2}',"cashAndCashEquivalents",i2)
     AddElement(databaseWB,link3,f'Retained earnings n-{i2}',"retainedEarnings",i2)
     AddElement(databaseWB,link3,f'Total stockholders equity n-{i2}',"totalStockholdersEquity",i2)
     AddElement(databaseWB,link3,f'Common stock number n-{i2}',"commonStock",i2)
     AddElement(databaseWB,link4,f'Research and development expenses n-{i2}',"researchAndDevelopmentExpenses",i2)
     AddElement(databaseWB,link4,f'Operating expenses n-{i2}',"operatingExpenses",i2)
  
  df = pd.DataFrame(databaseWB)
  df.to_csv(f'DatabaseWB_{datetime.today().strftime("%Y-%m-%d")}.csv', index=False, header=False)